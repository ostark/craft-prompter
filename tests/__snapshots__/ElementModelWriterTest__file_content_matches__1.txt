<?php

/**
 * Fake Element classes that do NOT extend from craft\base\Element,
 * to prevent @mixin \craft\behaviors\CustomFieldBehavior which includes all fields
 */

use craft\base\ElementInterface;
use craft\behaviors\FieldLayoutBehavior;
use craft\elements\db\ElementQueryInterface;
use craft\models\CategoryGroup;
use craft\models\EntryType;
use craft\models\MatrixBlockType;
use craft\models\Section;
use craft\models\Site;
use craft\models\TagGroup;
use craft\base\VolumeInterface;
use craft\models\UserGroup;
use craft\models\VolumeFolder;
use Twig\Markup;

/**
 * Asset represents an asset element.
 *
 * @property int|float|null $height the image height
 * @property int|float|null $width the image width
 * @property int|null $volumeId the volume ID
 * @property string|array|null $focalPoint the focal point represented as an array with `x` and `y` keys, or null
 * @property-read Markup|null $img an `<img>` tag based on this asset
 * @property-read VolumeFolder $folder the asset’s volume folder
 * @property-read VolumeInterface $volume the asset’s volume
 * @property-read bool $hasFocalPoint whether a user-defined focal point is set on the asset
 * @property-read string $extension the file extension
 * @property-read string $path the asset's path in the volume
 * @property-read string|null $mimeType the file’s MIME type, if it can be determined
 */
class PlainAsset {}


/**
 * Entry represents an entry element.
 *
 * @property PlainUser|null $author the entry's author
 * @property Section $section the entry's section
 * @property EntryType $type the entry type
 */
class PlainEntry {}

/**
 * MatrixBlock represents a matrix block element.
 *
 * @property ElementInterface $owner the owner
 * @property MatrixBlockType $type The block type
 */
class PlainMatrixBlock {}

/**
 * Category represents a category element.
 *
 * @property CategoryGroup $group the category's group
 */
class PlainCategory {}

/**
 * Tag represents a tag element.
 *
 * @property TagGroup $group the tag's group
 */
class PlainTag {}

/**
 * GlobalSet represents a global set element.
 *
 * @mixin FieldLayoutBehavior
 */
class PlainGlobalset {}

/**
 * User represents a user element.
 *
 * @property \DateTime|null $cooldownEndTime the time when the user will be over their cooldown period
 * @property string|null $friendlyName the user's first name or username
 * @property string|null $fullName the user's full name
 * @property UserGroup[] $groups the user's groups
 * @property bool $isCurrent whether this is the current logged-in user
 * @property string $name the user's full name or username
 * @property PlainAsset|null $photo the user's photo
 * @property array $preferences the user’s preferences
 * @property string|null $preferredLanguage the user’s preferred language
 * @property string|null $preferredLocale the user’s preferred formatting locale
 */
class PlainUser {}


/**
 * ElementQuery represents a SELECT SQL statement for elements in a way that is independent of DBMS.
 *
 * @property string|Site $site The site or site handle that the elements should be returned in
 *
 * @mixin ElementQueryInterface
 *
 * @see \craft\elements\db\ElementQuery
 */
class PlainElementQuery {}

/**
 * @method PlainAsset one($db = null)
 * @method PlainAsset[] all($db = null)
 * @method Twig\Markup getImg($transform = null, array $sizes = null)
 * @method static volume(string $value)
 */
class PlainAssetQuery extends PlainElementQuery {}

/**
 * @method PlainEntry one($db = null)
 * @method PlainEntry[] all($db = null)
 * @method static type(string $value)
 * @method static section(string $value)
 */
class PlainEntryQuery extends PlainElementQuery {}

/**
 * @method PlainGlobalset one($db = null)
 * @method PlainGlobalset[] all($db = null)
 * @method static handle(string $value)
 */
class PlainGlobalsetQuery extends PlainElementQuery {}

/**
 * @method PlainCategory one($db = null)
 * @method PlainCategory[] all($db = null)
 * @method static group(string $value)
 */
class PlainCategoryQuery extends PlainElementQuery {}

/**
 * @method PlainTag one($db = null)
 * @method PlainTag[] all($db = null)
 * @method static group(string $value)
 */
class PlainTagQuery extends PlainElementQuery {}

/**
 * @method PlainMatrixBlock one($db = null)
 * @method PlainMatrixBlock[] all($db = null)
 * @method static owner(ElementInterface $owner)
 * @method static type(string $value)
 */
class PlainMatrixBlockQuery extends PlainElementQuery {}

/**
 * @property string|null $someText
 * @property bool $someBool
 * @property craft\elements\db\AssetQuery $someAssetRel
 * @property Multi1Block[] $multi1
 */
class EfooEntry extends PlainEntry {}

/**
 * @property string|null $someText2
 * @property bool $someBool2
 * @property Multi2Block[] $multi2
 */
class EbarEntry extends PlainEntry {}

/**
 * @property string|null $someText
 * @property bool $someBool
 * @property SomeEntry $someEntry
 */
class GfooGlobalset extends PlainGlobalSet {}

/**
 * @property string|null $someText
 * @property bool $someBool
 */
class AfooAsset extends PlainAsset {}

/**
 * @method EfooEntry one($db = null)
 * @method EfooEntry[] all($db = null)
 */
class EfooEntryQuery extends PlainEntryQuery {}

/**
 * @method EbarEntry one($db = null)
 * @method EbarEntry[] all($db = null)
 */
class EbarEntryQuery extends PlainEntryQuery {}

/**
 * @method GfooGlobalset one($db = null)
 * @method GfooGlobalset[] all($db = null)
 */
class GfooGlobalsetQuery extends PlainGlobalSetQuery {}

/**
 * @method AfooAsset one($db = null)
 * @method AfooAsset[] all($db = null)
 */
class AfooAssetQuery extends PlainAssetQuery {}

/**
 * @method Type1Entry one($db = null)
 * @method Type1Entry[] all($db = null)
 */
class Sec1SectionQuery extends PlainElementQuery {}

/**
 * @method Type2Entry one($db = null)
 * @method Type2Entry[] all($db = null)
 */
class Sec2SectionQuery extends PlainElementQuery {}

/**
 * @method Type3aEntry|Type3bEntry|Type3cEntry one($db = null)
 * @method Type3aEntry[]|Type3bEntry[]|Type3cEntry[] all($db = null)
 */
class Sec3SectionQuery extends PlainElementQuery {}

/**
 * @property craft\fields\PlainText $text1
 * @property craft\fields\PlainText $text2
 * @property craft\fields\PlainText $text3
 */
class Multi1Block extends PlainMatrixBlock {}

/**
 * @property craft\fields\PlainText $text100
 * @property craft\fields\PlainText $text200
 * @property craft\fields\PlainText $text300
 */
class Multi2Block extends PlainMatrixBlock {}
